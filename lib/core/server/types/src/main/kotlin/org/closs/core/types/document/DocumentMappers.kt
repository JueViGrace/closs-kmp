package org.closs.core.types.document

import org.closs.core.shared.types.Constants
import org.closs.core.shared.types.document.CreateDocumentDetailsDto
import org.closs.core.shared.types.document.CreateDocumentDto
import org.closs.core.shared.types.document.DocumentDetailsDto
import org.closs.core.shared.types.document.DocumentDto
import org.closs.core.types.aliases.DbDocument
import org.closs.core.types.aliases.DbDocumentLines
import org.closs.core.types.aliases.DocumentWithLines

fun DbDocument.toDto(): DocumentDto = DocumentDto(
    agencia = agencia,
    tipodoc = tipodoc,
    documento = documento,
    tipodocv = tipodocv,
    codcliente = codcliente,
    nombrecli = nombrecli,
    contribesp = contribesp.toInt(),
    rutaParme = ruta_parme.toInt(),
    tipoprecio = tipoprecio.toInt(),
    emision = emision,
    recepcion = recepcion,
    vence = vence,
    diascred = diascred,
    estatusdoc = estatusdoc.toInt(),
    dtotneto = dtotneto,
    dtotimpuest = dtotimpuest,
    dtotalfinal = dtotalfinal,
    dtotpagos = dtotpagos,
    dtotdescuen = dtotdescuen,
    dFlete = dFlete,
    dtotdev = dtotdev,
    dvndmtototal = dvndmtototal,
    dretencion = dretencion,
    dretencioniva = dretencioniva,
    vendedor = vendedor,
    codcoord = codcoord,
    aceptadev = aceptadev.toInt(),
    ktiNegesp = kti_negesp.toInt(),
    bsiva = bsiva,
    bsflete = bsflete,
    bsretencion = bsretencion,
    bsretencioniva = bsretencioniva,
    tasadoc = tasadoc,
    mtodcto = mtodcto,
    fchvencedcto = fchvencedcto,
    tienedcto = tienedcto.toInt(),
    cbsret = cbsret,
    cdret = cdret,
    cbsretiva = cbsretiva,
    cdretiva = cdretiva,
    cbsrparme = cbsrparme,
    cdrparme = cdrparme,
    cbsretflete = cbsretflete,
    cdretflete = cdretflete,
    bsmtoiva = bsmtoiva,
    bsmtofte = bsmtofte,
    retmunMto = retmun_mto,
    dolarflete = dolarflete.toInt(),
    bsretflete = bsretflete,
    dretflete = dretflete,
    dretmunMto = dretmun_mto,
    retivaoblig = retivaoblig.toInt(),
    edoentrega = edoentrega.toInt(),
    dmtoiva = dmtoiva,
    prcdctoaplic = prcdctoaplic,
    montodctodol = montodctodol,
    montodctobs = montodctobs,
    createdAt = created_at,
    updatedAt = updated_at
)

fun List<DocumentWithLines>.withLinesToDto(): DocumentDto? {
    val group: Map<DocumentDto, List<DocumentWithLines>> = this.groupBy { row ->
        DocumentDto(
            agencia = row.agencia,
            tipodoc = row.tipodoc,
            documento = row.documento,
            tipodocv = row.tipodocv,
            codcliente = row.codcliente,
            nombrecli = row.nombrecli,
            contribesp = row.contribesp.toInt(),
            rutaParme = row.ruta_parme.toInt(),
            tipoprecio = row.tipoprecio.toInt(),
            emision = row.emision,
            recepcion = row.recepcion,
            vence = row.vence,
            diascred = row.diascred,
            estatusdoc = row.estatusdoc.toInt(),
            dtotneto = row.dtotneto,
            dtotimpuest = row.dtotimpuest,
            dtotalfinal = row.dtotalfinal,
            dtotpagos = row.dtotpagos,
            dtotdescuen = row.dtotdescuen,
            dFlete = row.dFlete,
            dtotdev = row.dtotdev,
            dvndmtototal = row.dvndmtototal,
            dretencion = row.dretencion,
            dretencioniva = row.dretencioniva,
            vendedor = row.vendedor,
            codcoord = row.codcoord,
            aceptadev = row.aceptadev.toInt(),
            ktiNegesp = row.kti_negesp.toInt(),
            bsiva = row.bsiva,
            bsflete = row.bsflete,
            bsretencion = row.bsretencion,
            bsretencioniva = row.bsretencioniva,
            tasadoc = row.tasadoc,
            mtodcto = row.mtodcto,
            fchvencedcto = row.fchvencedcto,
            tienedcto = row.tienedcto.toInt(),
            cbsret = row.cbsret,
            cdret = row.cdret,
            cbsretiva = row.cbsretiva,
            cdretiva = row.cdretiva,
            cbsrparme = row.cbsrparme,
            cdrparme = row.cdrparme,
            cbsretflete = row.cbsretflete,
            cdretflete = row.cdretflete,
            bsmtoiva = row.bsmtoiva,
            bsmtofte = row.bsmtofte,
            retmunMto = row.retmun_mto,
            dolarflete = row.dolarflete.toInt(),
            bsretflete = row.bsretflete,
            dretflete = row.dretflete,
            dretmunMto = row.dretmun_mto,
            retivaoblig = row.retivaoblig.toInt(),
            edoentrega = row.edoentrega.toInt(),
            dmtoiva = row.dmtoiva,
            prcdctoaplic = row.prcdctoaplic,
            montodctodol = row.montodctodol,
            montodctobs = row.montodctobs,
            createdAt = row.created_at,
            updatedAt = row.updated_at
        )
    }

    return group.map { (doc: DocumentDto, rows: List<DocumentWithLines>) ->
        return@map DocumentDto(
            agencia = doc.agencia,
            tipodoc = doc.tipodoc,
            documento = doc.documento,
            tipodocv = doc.tipodocv,
            codcliente = doc.codcliente,
            nombrecli = doc.nombrecli,
            contribesp = doc.contribesp,
            rutaParme = doc.rutaParme,
            tipoprecio = doc.tipoprecio,
            emision = doc.emision,
            recepcion = doc.recepcion,
            vence = doc.vence,
            diascred = doc.diascred,
            estatusdoc = doc.estatusdoc,
            dtotneto = doc.dtotneto,
            dtotimpuest = doc.dtotimpuest,
            dtotalfinal = doc.dtotalfinal,
            dtotpagos = doc.dtotpagos,
            dtotdescuen = doc.dtotdescuen,
            dFlete = doc.dFlete,
            dtotdev = doc.dtotdev,
            dvndmtototal = doc.dvndmtototal,
            dretencion = doc.dretencion,
            dretencioniva = doc.dretencioniva,
            vendedor = doc.vendedor,
            codcoord = doc.codcoord,
            aceptadev = doc.aceptadev,
            ktiNegesp = doc.ktiNegesp,
            bsiva = doc.bsiva,
            bsflete = doc.bsflete,
            bsretencion = doc.bsretencion,
            bsretencioniva = doc.bsretencioniva,
            tasadoc = doc.tasadoc,
            mtodcto = doc.mtodcto,
            fchvencedcto = doc.fchvencedcto,
            tienedcto = doc.tienedcto,
            cbsret = doc.cbsret,
            cdret = doc.cdret,
            cbsretiva = doc.cbsretiva,
            cdretiva = doc.cdretiva,
            cbsrparme = doc.cbsrparme,
            cdrparme = doc.cdrparme,
            cbsretflete = doc.cbsretflete,
            cdretflete = doc.cdretflete,
            bsmtoiva = doc.bsmtoiva,
            bsmtofte = doc.bsmtofte,
            retmunMto = doc.retmunMto,
            dolarflete = doc.dolarflete,
            bsretflete = doc.bsretflete,
            dretflete = doc.dretflete,
            dretmunMto = doc.dretmunMto,
            retivaoblig = doc.retivaoblig,
            edoentrega = doc.edoentrega,
            dmtoiva = doc.dmtoiva,
            prcdctoaplic = doc.prcdctoaplic,
            montodctodol = doc.montodctodol,
            montodctobs = doc.montodctobs,
            createdAt = doc.createdAt,
            updatedAt = doc.updatedAt,
            lines = rows.docLinesToDetails()
        )
    }.firstOrNull()
}

fun List<DocumentWithLines>.docLinesToDetails(): List<DocumentDetailsDto> {
    this.firstOrNull { row -> row.documento_ == null } ?: return emptyList()

    return this.map { row ->
        return@map DocumentDetailsDto(
            agencia = row.agencia_ ?: "",
            tipodoc = row.tipodoc_ ?: "",
            documento = row.documento_ ?: "",
            tipodocv = row.tipodocv_ ?: "",
            grupo = row.grupo ?: "",
            subgrupo = row.subgrupo ?: "",
            origen = row.origen?.toInt() ?: 0,
            codigo = row.codigo ?: "",
            codhijo = row.codhijo ?: "",
            pid = row.pid ?: "",
            nombre = row.nombre ?: "",
            cantidad = row.cantidad?.toInt() ?: 0,
            cntdevuelt = row.cntdevuelt?.toInt() ?: 0,
            vndcntdevuelt = row.vndcntdevuelt?.toInt() ?: 0,
            dvndmtototal = row.dvndmtototal_ ?: 0.0,
            dpreciofin = row.dpreciofin ?: 0.0,
            dpreciounit = row.dpreciounit ?: 0.0,
            dmontoneto = row.dmontoneto ?: 0.0,
            dmontototal = row.dmontototal ?: 0.0,
            timpueprc = row.timpueprc ?: 0.0,
            unidevuelt = row.unidevuelt?.toInt() ?: 0,
            fechadoc = row.fechadoc ?: "",
            vendedor = row.vendedor_ ?: "",
            codcoord = row.codcoord_ ?: ""
        )
    }
}

fun CreateDocumentDto.toDb(): DbDocument = DbDocument(
    agencia = agencia,
    tipodoc = tipodoc,
    documento = documento,
    tipodocv = tipodocv,
    codcliente = codcliente,
    nombrecli = nombrecli,
    contribesp = contribesp.toLong(),
    ruta_parme = rutaParme.toLong(),
    tipoprecio = tipoprecio.toLong(),
    emision = emision,
    recepcion = recepcion,
    vence = vence,
    diascred = diascred,
    estatusdoc = estatusdoc.toLong(),
    dtotneto = dtotneto,
    dtotimpuest = dtotimpuest,
    dtotalfinal = dtotalfinal,
    dtotpagos = dtotpagos,
    dtotdescuen = dtotdescuen,
    dFlete = dFlete,
    dtotdev = dtotdev,
    dvndmtototal = dvndmtototal,
    dretencion = dretencion,
    dretencioniva = dretencioniva,
    vendedor = vendedor,
    codcoord = codcoord,
    aceptadev = aceptadev.toLong(),
    kti_negesp = ktiNegesp.toLong(),
    bsiva = bsiva,
    bsflete = bsflete,
    bsretencion = bsretencion,
    bsretencioniva = bsretencioniva,
    tasadoc = tasadoc,
    mtodcto = mtodcto,
    fchvencedcto = fchvencedcto,
    tienedcto = tienedcto.toLong(),
    cbsret = cbsret,
    cdret = cdret,
    cbsretiva = cbsretiva,
    cdretiva = cdretiva,
    cbsrparme = cbsrparme,
    cdrparme = cdrparme,
    cbsretflete = cbsretflete,
    cdretflete = cdretflete,
    bsmtoiva = bsmtoiva,
    bsmtofte = bsmtofte,
    retmun_mto = retmunMto,
    dolarflete = dolarflete.toLong(),
    bsretflete = bsretflete,
    dretflete = dretflete,
    dretmun_mto = dretmunMto,
    retivaoblig = retivaoblig.toLong(),
    edoentrega = edoentrega.toLong(),
    dmtoiva = dmtoiva,
    prcdctoaplic = prcdctoaplic,
    montodctodol = montodctodol,
    montodctobs = montodctobs,
    created_at = Constants.currentTime,
    updated_at = Constants.currentTime
)

fun CreateDocumentDetailsDto.detailsToDb(): DbDocumentLines = DbDocumentLines(
    agencia = agencia,
    tipodoc = tipodoc,
    documento = documento,
    tipodocv = tipodocv,
    grupo = grupo,
    subgrupo = subgrupo,
    origen = origen.toLong(),
    codigo = codigo,
    codhijo = codhijo,
    pid = pid,
    nombre = nombre,
    cantidad = cantidad.toLong(),
    cntdevuelt = cntdevuelt.toLong(),
    vndcntdevuelt = vndcntdevuelt.toLong(),
    dvndmtototal = dvndmtototal,
    dpreciofin = dpreciofin,
    dpreciounit = dpreciounit,
    dmontoneto = dmontoneto,
    dmontototal = dmontototal,
    timpueprc = timpueprc,
    unidevuelt = unidevuelt.toLong(),
    fechadoc = fechadoc,
    vendedor = vendedor,
    codcoord = codcoord
)
