CREATE TABLE IF NOT EXISTS closs_product(
    codigo TEXT NOT NULL PRIMARY KEY,
    grupo TEXT NOT NULL DEFAULT '',
    subgrupo TEXT NOT NULL DEFAULT '',
    nombre TEXT NOT NULL DEFAULT '',
    referencia TEXT NOT NULL UNIQUE DEFAULT '',
    marca TEXT NOT NULL DEFAULT '',
    unidad TEXT NOT NULL DEFAULT '',
    discont INTEGER NOT NULL DEFAULT 0,
    existencia INTEGER NOT NULL DEFAULT 0,
    vta_max INTEGER NOT NULL DEFAULT 0,
    vta_min INTEGER NOT NULL DEFAULT 0,
    vta_minenx INTEGER NOT NULL DEFAULT 0,
    comprometido INTEGER NOT NULL DEFAULT 0,
    precio1 REAL NOT NULL DEFAULT 0.0,
    precio2 REAL NOT NULL DEFAULT 0.0,
    precio3 REAL NOT NULL DEFAULT 0.0,
    precio4 REAL NOT NULL DEFAULT 0.0,
    precio5 REAL NOT NULL DEFAULT 0.0,
    precio6 REAL NOT NULL DEFAULT 0.0,
    precio7 REAL NOT NULL DEFAULT 0.0,
    preventa INTEGER NOT NULL DEFAULT 0,
    vta_solofac INTEGER NOT NULL DEFAULT 0,
    vta_solone INTEGER NOT NULL DEFAULT 0,
    codbarras INTEGER NOT NULL DEFAULT 0,
    detalles TEXT NOT NULL DEFAULT '',
    cantbulto REAL NOT NULL DEFAULT 0.0,
    costo_prom REAL NOT NULL DEFAULT 0.0,
    util1 TEXT NOT NULL DEFAULT 0.0,
    util2 TEXT NOT NULL DEFAULT 0.0,
    util3 TEXT NOT NULL DEFAULT 0.0,
    fchultcomp TEXT NOT NULL DEFAULT '',
    qtyultcomp TEXT NOT NULL DEFAULT '',
    images TEXT NOT NULL DEFAULT '',
    created_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
    deleted_at TEXT DEFAULT NULL
);

findProducts:
SELECT *
FROM closs_product;

findProductByCode:
SELECT *
FROM closs_product
WHERE codigo = :code;

findExistingProducts:
SELECT *
FROM closs_product
WHERE (existencia - comprometido) > 0 AND
discont = 0 AND
deleted_at IS NULL;

findExistingProductByCode:
SELECT *
FROM closs_product
WHERE codigo = :code AND
(existencia - comprometido) > 0 AND
discont = 0 AND
deleted_at IS NULL;

insert:
INSERT OR REPLACE INTO closs_product(
    codigo,
    grupo,
    subgrupo,
    nombre,
    referencia,
    marca,
    unidad,
    discont,
    existencia,
    vta_max,
    vta_min,
    vta_minenx,
    comprometido,
    precio1,
    precio2,
    precio3,
    precio4,
    precio5,
    precio6,
    precio7,
    preventa,
    vta_solofac,
    vta_solone,
    codbarras,
    detalles,
    cantbulto,
    costo_prom,
    util1,
    util2,
    util3,
    fchultcomp,
    qtyultcomp,
    images
)
VALUES ?
RETURNING *;

update:
UPDATE closs_product SET
    grupo = :grupo,
    subgrupo = :subgrupo,
    nombre = :nombre,
    referencia = :referencia,
    marca = :marca,
    unidad = :unidad,
    discont = :discont,
    existencia = :existencia,
    vta_max = :vta_max,
    vta_min = :vta_min,
    vta_minenx = :vta_minenx,
    comprometido = :comprometido,
    precio1 = :precio1,
    precio2 = :precio2,
    precio3 = :precio3,
    precio4 = :precio4,
    precio5 = :precio5,
    precio6 = :precio6,
    precio7 = :precio7,
    preventa = :preventa,
    vta_solofac = :vta_solofac,
    vta_solone = :vta_solone,
    codbarras = :codbarras,
    detalles = :detalles,
    cantbulto = :cantbulto,
    costo_prom = :costo_prom,
    util1 = :util1,
    util2 = :util2,
    util3 = :util3,
    fchultcomp = :fchultcomp,
    qtyultcomp = :qtyultcomp,
    images = :images,
    updated_at = CURRENT_TIMESTAMP
WHERE codigo = :code
RETURNING *;

softDelete:
UPDATE closs_product SET
    updated_at = CURRENT_TIMESTAMP,
    deleted_at = CURRENT_TIMESTAMP
WHERE codigo = :code
RETURNING *;

delete:
DELETE FROM closs_product
WHERE codigo = :code
RETURNING *;